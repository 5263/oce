// This file is generated by WOK (CPPExt).
// Please do not edit this file; modify original file instead.
// The copyright and license terms as defined for the original file apply to 
// this header file considered to be the "object code" form of the original source.

#ifndef _Extrema_POnSurfParams_HeaderFile
#define _Extrema_POnSurfParams_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif

#include <Standard_Real.hxx>
#include <Extrema_ElementType.hxx>
#include <Standard_Integer.hxx>
#include <Extrema_POnSurf.hxx>
#ifndef _Standard_PrimitiveTypes_HeaderFile
#include <Standard_PrimitiveTypes.hxx>
#endif
class gp_Pnt;


Standard_EXPORT const Handle(Standard_Type)& STANDARD_TYPE(Extrema_POnSurfParams);

//! Data container for point on surface parameters. These parameters <br>
//!          are required to compute an initial approximation for extrema <br>
//!          computation. <br>
class Extrema_POnSurfParams  : public Extrema_POnSurf {

public:
  void* operator new(size_t,void* anAddress) 
  {
    return anAddress;
  }
  void* operator new(size_t size) 
  {
    return Standard::Allocate(size); 
  }
  void  operator delete(void *anAddress) 
  {
    if (anAddress) Standard::Free((Standard_Address&)anAddress); 
  }

  //! empty constructor <br>
      Extrema_POnSurfParams();
  //! Creation of a point on surface with parameter <br>
//!          values on the surface and a Pnt from gp. <br>
      Extrema_POnSurfParams(const Standard_Real theU,const Standard_Real theV,const gp_Pnt& thePnt);
  //! Sets the square distance from this point to another one <br>
//!          (e.g. to the point to be projected). <br>
        void SetSqrDistance(const Standard_Real theSqrDistance) ;
  //! Query the square distance from this point to another one. <br>
        Standard_Real GetSqrDistance() const;
  //! Sets the element type on which this point is situated. <br>
        void SetElementType(const Extrema_ElementType theElementType) ;
  //! Query the element type on which this point is situated. <br>
        Extrema_ElementType GetElementType() const;
  //! Sets the U and V indices of an element that contains <br>
//!          this point. <br>
        void SetIndices(const Standard_Integer theIndexU,const Standard_Integer theIndexV) ;
  //! Query the U and V indices of an element that contains <br>
//!          this point. <br>
        void GetIndices(Standard_Integer& theIndexU,Standard_Integer& theIndexV) const;
    Standard_Real _CSFDB_GetExtrema_POnSurfParamsmySqrDistance() const { return mySqrDistance; }
    void _CSFDB_SetExtrema_POnSurfParamsmySqrDistance(const Standard_Real p) { mySqrDistance = p; }
    Extrema_ElementType _CSFDB_GetExtrema_POnSurfParamsmyElementType() const { return myElementType; }
    void _CSFDB_SetExtrema_POnSurfParamsmyElementType(const Extrema_ElementType p) { myElementType = p; }
    Standard_Integer _CSFDB_GetExtrema_POnSurfParamsmyIndexU() const { return myIndexU; }
    void _CSFDB_SetExtrema_POnSurfParamsmyIndexU(const Standard_Integer p) { myIndexU = p; }
    Standard_Integer _CSFDB_GetExtrema_POnSurfParamsmyIndexV() const { return myIndexV; }
    void _CSFDB_SetExtrema_POnSurfParamsmyIndexV(const Standard_Integer p) { myIndexV = p; }



protected:




private: 


Standard_Real mySqrDistance;
Extrema_ElementType myElementType;
Standard_Integer myIndexU;
Standard_Integer myIndexV;


};


#include <Extrema_POnSurfParams.lxx>



// other Inline functions and methods (like "C++: function call" methods)


#endif
